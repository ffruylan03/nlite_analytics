// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package middleware.loader_radford_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: loader_radford Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class loader_radford implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(database != null){
				
					this.setProperty("database", database.toString());
				
			}
			
			if(database_schema != null){
				
					this.setProperty("database_schema", database_schema.toString());
				
			}
			
			if(filelist_src != null){
				
					this.setProperty("filelist_src", filelist_src.toString());
				
			}
			
			if(password != null){
				
					this.setProperty("password", password.toString());
				
			}
			
			if(server != null){
				
					this.setProperty("server", server.toString());
				
			}
			
			if(server_port != null){
				
					this.setProperty("server_port", server_port.toString());
				
			}
			
			if(table != null){
				
					this.setProperty("table", table.toString());
				
			}
			
			if(userid != null){
				
					this.setProperty("userid", userid.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String database;
public String getDatabase(){
	return this.database;
}
public String database_schema;
public String getDatabase_schema(){
	return this.database_schema;
}
public String filelist_src;
public String getFilelist_src(){
	return this.filelist_src;
}
public String password;
public String getPassword(){
	return this.password;
}
public String server;
public String getServer(){
	return this.server;
}
public String server_port;
public String getServer_port(){
	return this.server_port;
}
public String table;
public String getTable(){
	return this.table;
}
public String userid;
public String getUserid(){
	return this.userid;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "loader_radford";
	private final String projectName = "MIDDLEWARE";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				loader_radford.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(loader_radford.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileList_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class map_outStruct implements routines.system.IPersistableRow<map_outStruct> {
    final static byte[] commonByteArrayLock_MIDDLEWARE_loader_radford = new byte[0];
    static byte[] commonByteArray_MIDDLEWARE_loader_radford = new byte[0];

	
			    public int upload_id;

				public int getUpload_id () {
					return this.upload_id;
				}
				
			    public String event_date;

				public String getEvent_date () {
					return this.event_date;
				}
				
			    public String event_description;

				public String getEvent_description () {
					return this.event_description;
				}
				
			    public String player_name;

				public String getPlayer_name () {
					return this.player_name;
				}
				
			    public String event_type;

				public String getEvent_type () {
					return this.event_type;
				}
				
			    public String event_location;

				public String getEvent_location () {
					return this.event_location;
				}
				
			    public String event_result;

				public String getEvent_result () {
					return this.event_result;
				}
				
			    public String event_tags;

				public String getEvent_tags () {
					return this.event_tags;
				}
				
			    public String segment_name;

				public String getSegment_name () {
					return this.segment_name;
				}
				
			    public BigDecimal performance_duration__min;

				public BigDecimal getPerformance_duration__min () {
					return this.performance_duration__min;
				}
				
			    public BigDecimal total_distance__m;

				public BigDecimal getTotal_distance__m () {
					return this.total_distance__m;
				}
				
			    public BigDecimal walk_distance__m;

				public BigDecimal getWalk_distance__m () {
					return this.walk_distance__m;
				}
				
			    public BigDecimal jog_distance__m;

				public BigDecimal getJog_distance__m () {
					return this.jog_distance__m;
				}
				
			    public BigDecimal run_distance__m;

				public BigDecimal getRun_distance__m () {
					return this.run_distance__m;
				}
				
			    public BigDecimal sprint_distance__m;

				public BigDecimal getSprint_distance__m () {
					return this.sprint_distance__m;
				}
				
			    public BigDecimal sprint_efforts;

				public BigDecimal getSprint_efforts () {
					return this.sprint_efforts;
				}
				
			    public BigDecimal zone_1_distance__m;

				public BigDecimal getZone_1_distance__m () {
					return this.zone_1_distance__m;
				}
				
			    public BigDecimal zone_2_distance__m;

				public BigDecimal getZone_2_distance__m () {
					return this.zone_2_distance__m;
				}
				
			    public BigDecimal zone_3_distance__m;

				public BigDecimal getZone_3_distance__m () {
					return this.zone_3_distance__m;
				}
				
			    public BigDecimal zone_4_distance__m;

				public BigDecimal getZone_4_distance__m () {
					return this.zone_4_distance__m;
				}
				
			    public BigDecimal zone_5_distance__m;

				public BigDecimal getZone_5_distance__m () {
					return this.zone_5_distance__m;
				}
				
			    public BigDecimal zone_6_distance__m;

				public BigDecimal getZone_6_distance__m () {
					return this.zone_6_distance__m;
				}
				
			    public BigDecimal zone_7_distance__m;

				public BigDecimal getZone_7_distance__m () {
					return this.zone_7_distance__m;
				}
				
			    public BigDecimal zone_8_distance__m;

				public BigDecimal getZone_8_distance__m () {
					return this.zone_8_distance__m;
				}
				
			    public BigDecimal hard_running__m;

				public BigDecimal getHard_running__m () {
					return this.hard_running__m;
				}
				
			    public BigDecimal hard_running_efforts;

				public BigDecimal getHard_running_efforts () {
					return this.hard_running_efforts;
				}
				
			    public BigDecimal work_rate__m_min;

				public BigDecimal getWork_rate__m_min () {
					return this.work_rate__m_min;
				}
				
			    public BigDecimal top_speed__m_s;

				public BigDecimal getTop_speed__m_s () {
					return this.top_speed__m_s;
				}
				
			    public BigDecimal intensity;

				public BigDecimal getIntensity () {
					return this.intensity;
				}
				
			    public BigDecimal impact_light;

				public BigDecimal getImpact_light () {
					return this.impact_light;
				}
				
			    public BigDecimal impact_medium;

				public BigDecimal getImpact_medium () {
					return this.impact_medium;
				}
				
			    public BigDecimal impact_heavy;

				public BigDecimal getImpact_heavy () {
					return this.impact_heavy;
				}
				
			    public BigDecimal load_2d;

				public BigDecimal getLoad_2d () {
					return this.load_2d;
				}
				
			    public BigDecimal load_3d;

				public BigDecimal getLoad_3d () {
					return this.load_3d;
				}
				
			    public BigDecimal hr_mean__bpm;

				public BigDecimal getHr_mean__bpm () {
					return this.hr_mean__bpm;
				}
				
			    public BigDecimal hr_max__bpm;

				public BigDecimal getHr_max__bpm () {
					return this.hr_max__bpm;
				}
				
			    public BigDecimal hr_grey_zone;

				public BigDecimal getHr_grey_zone () {
					return this.hr_grey_zone;
				}
				
			    public BigDecimal hr_blue_zone;

				public BigDecimal getHr_blue_zone () {
					return this.hr_blue_zone;
				}
				
			    public BigDecimal hr_green_zone;

				public BigDecimal getHr_green_zone () {
					return this.hr_green_zone;
				}
				
			    public BigDecimal hr_yellow_zone;

				public BigDecimal getHr_yellow_zone () {
					return this.hr_yellow_zone;
				}
				
			    public BigDecimal hr_red_zone;

				public BigDecimal getHr_red_zone () {
					return this.hr_red_zone;
				}
				
			    public BigDecimal hr_efficiency__m_beat;

				public BigDecimal getHr_efficiency__m_beat () {
					return this.hr_efficiency__m_beat;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MIDDLEWARE_loader_radford.length) {
				if(length < 1024 && commonByteArray_MIDDLEWARE_loader_radford.length == 0) {
   					commonByteArray_MIDDLEWARE_loader_radford = new byte[1024];
				} else {
   					commonByteArray_MIDDLEWARE_loader_radford = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MIDDLEWARE_loader_radford, 0, length);
			strReturn = new String(commonByteArray_MIDDLEWARE_loader_radford, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MIDDLEWARE_loader_radford.length) {
				if(length < 1024 && commonByteArray_MIDDLEWARE_loader_radford.length == 0) {
   					commonByteArray_MIDDLEWARE_loader_radford = new byte[1024];
				} else {
   					commonByteArray_MIDDLEWARE_loader_radford = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MIDDLEWARE_loader_radford, 0, length);
			strReturn = new String(commonByteArray_MIDDLEWARE_loader_radford, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MIDDLEWARE_loader_radford) {

        	try {

        		int length = 0;
		
			        this.upload_id = dis.readInt();
					
					this.event_date = readString(dis);
					
					this.event_description = readString(dis);
					
					this.player_name = readString(dis);
					
					this.event_type = readString(dis);
					
					this.event_location = readString(dis);
					
					this.event_result = readString(dis);
					
					this.event_tags = readString(dis);
					
					this.segment_name = readString(dis);
					
						this.performance_duration__min = (BigDecimal) dis.readObject();
					
						this.total_distance__m = (BigDecimal) dis.readObject();
					
						this.walk_distance__m = (BigDecimal) dis.readObject();
					
						this.jog_distance__m = (BigDecimal) dis.readObject();
					
						this.run_distance__m = (BigDecimal) dis.readObject();
					
						this.sprint_distance__m = (BigDecimal) dis.readObject();
					
						this.sprint_efforts = (BigDecimal) dis.readObject();
					
						this.zone_1_distance__m = (BigDecimal) dis.readObject();
					
						this.zone_2_distance__m = (BigDecimal) dis.readObject();
					
						this.zone_3_distance__m = (BigDecimal) dis.readObject();
					
						this.zone_4_distance__m = (BigDecimal) dis.readObject();
					
						this.zone_5_distance__m = (BigDecimal) dis.readObject();
					
						this.zone_6_distance__m = (BigDecimal) dis.readObject();
					
						this.zone_7_distance__m = (BigDecimal) dis.readObject();
					
						this.zone_8_distance__m = (BigDecimal) dis.readObject();
					
						this.hard_running__m = (BigDecimal) dis.readObject();
					
						this.hard_running_efforts = (BigDecimal) dis.readObject();
					
						this.work_rate__m_min = (BigDecimal) dis.readObject();
					
						this.top_speed__m_s = (BigDecimal) dis.readObject();
					
						this.intensity = (BigDecimal) dis.readObject();
					
						this.impact_light = (BigDecimal) dis.readObject();
					
						this.impact_medium = (BigDecimal) dis.readObject();
					
						this.impact_heavy = (BigDecimal) dis.readObject();
					
						this.load_2d = (BigDecimal) dis.readObject();
					
						this.load_3d = (BigDecimal) dis.readObject();
					
						this.hr_mean__bpm = (BigDecimal) dis.readObject();
					
						this.hr_max__bpm = (BigDecimal) dis.readObject();
					
						this.hr_grey_zone = (BigDecimal) dis.readObject();
					
						this.hr_blue_zone = (BigDecimal) dis.readObject();
					
						this.hr_green_zone = (BigDecimal) dis.readObject();
					
						this.hr_yellow_zone = (BigDecimal) dis.readObject();
					
						this.hr_red_zone = (BigDecimal) dis.readObject();
					
						this.hr_efficiency__m_beat = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MIDDLEWARE_loader_radford) {

        	try {

        		int length = 0;
		
			        this.upload_id = dis.readInt();
					
					this.event_date = readString(dis);
					
					this.event_description = readString(dis);
					
					this.player_name = readString(dis);
					
					this.event_type = readString(dis);
					
					this.event_location = readString(dis);
					
					this.event_result = readString(dis);
					
					this.event_tags = readString(dis);
					
					this.segment_name = readString(dis);
					
						this.performance_duration__min = (BigDecimal) dis.readObject();
					
						this.total_distance__m = (BigDecimal) dis.readObject();
					
						this.walk_distance__m = (BigDecimal) dis.readObject();
					
						this.jog_distance__m = (BigDecimal) dis.readObject();
					
						this.run_distance__m = (BigDecimal) dis.readObject();
					
						this.sprint_distance__m = (BigDecimal) dis.readObject();
					
						this.sprint_efforts = (BigDecimal) dis.readObject();
					
						this.zone_1_distance__m = (BigDecimal) dis.readObject();
					
						this.zone_2_distance__m = (BigDecimal) dis.readObject();
					
						this.zone_3_distance__m = (BigDecimal) dis.readObject();
					
						this.zone_4_distance__m = (BigDecimal) dis.readObject();
					
						this.zone_5_distance__m = (BigDecimal) dis.readObject();
					
						this.zone_6_distance__m = (BigDecimal) dis.readObject();
					
						this.zone_7_distance__m = (BigDecimal) dis.readObject();
					
						this.zone_8_distance__m = (BigDecimal) dis.readObject();
					
						this.hard_running__m = (BigDecimal) dis.readObject();
					
						this.hard_running_efforts = (BigDecimal) dis.readObject();
					
						this.work_rate__m_min = (BigDecimal) dis.readObject();
					
						this.top_speed__m_s = (BigDecimal) dis.readObject();
					
						this.intensity = (BigDecimal) dis.readObject();
					
						this.impact_light = (BigDecimal) dis.readObject();
					
						this.impact_medium = (BigDecimal) dis.readObject();
					
						this.impact_heavy = (BigDecimal) dis.readObject();
					
						this.load_2d = (BigDecimal) dis.readObject();
					
						this.load_3d = (BigDecimal) dis.readObject();
					
						this.hr_mean__bpm = (BigDecimal) dis.readObject();
					
						this.hr_max__bpm = (BigDecimal) dis.readObject();
					
						this.hr_grey_zone = (BigDecimal) dis.readObject();
					
						this.hr_blue_zone = (BigDecimal) dis.readObject();
					
						this.hr_green_zone = (BigDecimal) dis.readObject();
					
						this.hr_yellow_zone = (BigDecimal) dis.readObject();
					
						this.hr_red_zone = (BigDecimal) dis.readObject();
					
						this.hr_efficiency__m_beat = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.upload_id);
					
					// String
				
						writeString(this.event_date,dos);
					
					// String
				
						writeString(this.event_description,dos);
					
					// String
				
						writeString(this.player_name,dos);
					
					// String
				
						writeString(this.event_type,dos);
					
					// String
				
						writeString(this.event_location,dos);
					
					// String
				
						writeString(this.event_result,dos);
					
					// String
				
						writeString(this.event_tags,dos);
					
					// String
				
						writeString(this.segment_name,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.performance_duration__min);
					
					// BigDecimal
				
       			    	dos.writeObject(this.total_distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.walk_distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.jog_distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.run_distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.sprint_distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.sprint_efforts);
					
					// BigDecimal
				
       			    	dos.writeObject(this.zone_1_distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.zone_2_distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.zone_3_distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.zone_4_distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.zone_5_distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.zone_6_distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.zone_7_distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.zone_8_distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.hard_running__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.hard_running_efforts);
					
					// BigDecimal
				
       			    	dos.writeObject(this.work_rate__m_min);
					
					// BigDecimal
				
       			    	dos.writeObject(this.top_speed__m_s);
					
					// BigDecimal
				
       			    	dos.writeObject(this.intensity);
					
					// BigDecimal
				
       			    	dos.writeObject(this.impact_light);
					
					// BigDecimal
				
       			    	dos.writeObject(this.impact_medium);
					
					// BigDecimal
				
       			    	dos.writeObject(this.impact_heavy);
					
					// BigDecimal
				
       			    	dos.writeObject(this.load_2d);
					
					// BigDecimal
				
       			    	dos.writeObject(this.load_3d);
					
					// BigDecimal
				
       			    	dos.writeObject(this.hr_mean__bpm);
					
					// BigDecimal
				
       			    	dos.writeObject(this.hr_max__bpm);
					
					// BigDecimal
				
       			    	dos.writeObject(this.hr_grey_zone);
					
					// BigDecimal
				
       			    	dos.writeObject(this.hr_blue_zone);
					
					// BigDecimal
				
       			    	dos.writeObject(this.hr_green_zone);
					
					// BigDecimal
				
       			    	dos.writeObject(this.hr_yellow_zone);
					
					// BigDecimal
				
       			    	dos.writeObject(this.hr_red_zone);
					
					// BigDecimal
				
       			    	dos.writeObject(this.hr_efficiency__m_beat);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.upload_id);
					
					// String
				
						writeString(this.event_date,dos);
					
					// String
				
						writeString(this.event_description,dos);
					
					// String
				
						writeString(this.player_name,dos);
					
					// String
				
						writeString(this.event_type,dos);
					
					// String
				
						writeString(this.event_location,dos);
					
					// String
				
						writeString(this.event_result,dos);
					
					// String
				
						writeString(this.event_tags,dos);
					
					// String
				
						writeString(this.segment_name,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.performance_duration__min);
					
					// BigDecimal
				
       			    	dos.writeObject(this.total_distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.walk_distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.jog_distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.run_distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.sprint_distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.sprint_efforts);
					
					// BigDecimal
				
       			    	dos.writeObject(this.zone_1_distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.zone_2_distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.zone_3_distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.zone_4_distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.zone_5_distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.zone_6_distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.zone_7_distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.zone_8_distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.hard_running__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.hard_running_efforts);
					
					// BigDecimal
				
       			    	dos.writeObject(this.work_rate__m_min);
					
					// BigDecimal
				
       			    	dos.writeObject(this.top_speed__m_s);
					
					// BigDecimal
				
       			    	dos.writeObject(this.intensity);
					
					// BigDecimal
				
       			    	dos.writeObject(this.impact_light);
					
					// BigDecimal
				
       			    	dos.writeObject(this.impact_medium);
					
					// BigDecimal
				
       			    	dos.writeObject(this.impact_heavy);
					
					// BigDecimal
				
       			    	dos.writeObject(this.load_2d);
					
					// BigDecimal
				
       			    	dos.writeObject(this.load_3d);
					
					// BigDecimal
				
       			    	dos.writeObject(this.hr_mean__bpm);
					
					// BigDecimal
				
       			    	dos.writeObject(this.hr_max__bpm);
					
					// BigDecimal
				
       			    	dos.writeObject(this.hr_grey_zone);
					
					// BigDecimal
				
       			    	dos.writeObject(this.hr_blue_zone);
					
					// BigDecimal
				
       			    	dos.writeObject(this.hr_green_zone);
					
					// BigDecimal
				
       			    	dos.writeObject(this.hr_yellow_zone);
					
					// BigDecimal
				
       			    	dos.writeObject(this.hr_red_zone);
					
					// BigDecimal
				
       			    	dos.writeObject(this.hr_efficiency__m_beat);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("upload_id="+String.valueOf(upload_id));
		sb.append(",event_date="+event_date);
		sb.append(",event_description="+event_description);
		sb.append(",player_name="+player_name);
		sb.append(",event_type="+event_type);
		sb.append(",event_location="+event_location);
		sb.append(",event_result="+event_result);
		sb.append(",event_tags="+event_tags);
		sb.append(",segment_name="+segment_name);
		sb.append(",performance_duration__min="+String.valueOf(performance_duration__min));
		sb.append(",total_distance__m="+String.valueOf(total_distance__m));
		sb.append(",walk_distance__m="+String.valueOf(walk_distance__m));
		sb.append(",jog_distance__m="+String.valueOf(jog_distance__m));
		sb.append(",run_distance__m="+String.valueOf(run_distance__m));
		sb.append(",sprint_distance__m="+String.valueOf(sprint_distance__m));
		sb.append(",sprint_efforts="+String.valueOf(sprint_efforts));
		sb.append(",zone_1_distance__m="+String.valueOf(zone_1_distance__m));
		sb.append(",zone_2_distance__m="+String.valueOf(zone_2_distance__m));
		sb.append(",zone_3_distance__m="+String.valueOf(zone_3_distance__m));
		sb.append(",zone_4_distance__m="+String.valueOf(zone_4_distance__m));
		sb.append(",zone_5_distance__m="+String.valueOf(zone_5_distance__m));
		sb.append(",zone_6_distance__m="+String.valueOf(zone_6_distance__m));
		sb.append(",zone_7_distance__m="+String.valueOf(zone_7_distance__m));
		sb.append(",zone_8_distance__m="+String.valueOf(zone_8_distance__m));
		sb.append(",hard_running__m="+String.valueOf(hard_running__m));
		sb.append(",hard_running_efforts="+String.valueOf(hard_running_efforts));
		sb.append(",work_rate__m_min="+String.valueOf(work_rate__m_min));
		sb.append(",top_speed__m_s="+String.valueOf(top_speed__m_s));
		sb.append(",intensity="+String.valueOf(intensity));
		sb.append(",impact_light="+String.valueOf(impact_light));
		sb.append(",impact_medium="+String.valueOf(impact_medium));
		sb.append(",impact_heavy="+String.valueOf(impact_heavy));
		sb.append(",load_2d="+String.valueOf(load_2d));
		sb.append(",load_3d="+String.valueOf(load_3d));
		sb.append(",hr_mean__bpm="+String.valueOf(hr_mean__bpm));
		sb.append(",hr_max__bpm="+String.valueOf(hr_max__bpm));
		sb.append(",hr_grey_zone="+String.valueOf(hr_grey_zone));
		sb.append(",hr_blue_zone="+String.valueOf(hr_blue_zone));
		sb.append(",hr_green_zone="+String.valueOf(hr_green_zone));
		sb.append(",hr_yellow_zone="+String.valueOf(hr_yellow_zone));
		sb.append(",hr_red_zone="+String.valueOf(hr_red_zone));
		sb.append(",hr_efficiency__m_beat="+String.valueOf(hr_efficiency__m_beat));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(map_outStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_MIDDLEWARE_loader_radford = new byte[0];
    static byte[] commonByteArray_MIDDLEWARE_loader_radford = new byte[0];

	
			    public String Event_Date;

				public String getEvent_Date () {
					return this.Event_Date;
				}
				
			    public String Event_Description;

				public String getEvent_Description () {
					return this.Event_Description;
				}
				
			    public String Player_Name;

				public String getPlayer_Name () {
					return this.Player_Name;
				}
				
			    public String Event_Type;

				public String getEvent_Type () {
					return this.Event_Type;
				}
				
			    public String Event_Location;

				public String getEvent_Location () {
					return this.Event_Location;
				}
				
			    public String Event_Result;

				public String getEvent_Result () {
					return this.Event_Result;
				}
				
			    public String Event_Tags;

				public String getEvent_Tags () {
					return this.Event_Tags;
				}
				
			    public String Segment_Name;

				public String getSegment_Name () {
					return this.Segment_Name;
				}
				
			    public BigDecimal Performance_Duration__min;

				public BigDecimal getPerformance_Duration__min () {
					return this.Performance_Duration__min;
				}
				
			    public BigDecimal Total_Distance__m;

				public BigDecimal getTotal_Distance__m () {
					return this.Total_Distance__m;
				}
				
			    public BigDecimal Walk_Distance__m;

				public BigDecimal getWalk_Distance__m () {
					return this.Walk_Distance__m;
				}
				
			    public BigDecimal Jog_Distance__m;

				public BigDecimal getJog_Distance__m () {
					return this.Jog_Distance__m;
				}
				
			    public BigDecimal Run_Distance__m;

				public BigDecimal getRun_Distance__m () {
					return this.Run_Distance__m;
				}
				
			    public BigDecimal Sprint_Distance__m;

				public BigDecimal getSprint_Distance__m () {
					return this.Sprint_Distance__m;
				}
				
			    public BigDecimal Sprint_Efforts;

				public BigDecimal getSprint_Efforts () {
					return this.Sprint_Efforts;
				}
				
			    public BigDecimal Zone_1_Distance__m;

				public BigDecimal getZone_1_Distance__m () {
					return this.Zone_1_Distance__m;
				}
				
			    public BigDecimal Zone_2_Distance__m;

				public BigDecimal getZone_2_Distance__m () {
					return this.Zone_2_Distance__m;
				}
				
			    public BigDecimal Zone_3_Distance__m;

				public BigDecimal getZone_3_Distance__m () {
					return this.Zone_3_Distance__m;
				}
				
			    public BigDecimal Zone_4_Distance__m;

				public BigDecimal getZone_4_Distance__m () {
					return this.Zone_4_Distance__m;
				}
				
			    public BigDecimal Zone_5_Distance__m;

				public BigDecimal getZone_5_Distance__m () {
					return this.Zone_5_Distance__m;
				}
				
			    public BigDecimal Zone_6_Distance__m;

				public BigDecimal getZone_6_Distance__m () {
					return this.Zone_6_Distance__m;
				}
				
			    public BigDecimal Zone_7_Distance__m;

				public BigDecimal getZone_7_Distance__m () {
					return this.Zone_7_Distance__m;
				}
				
			    public BigDecimal Zone_8_Distance__m;

				public BigDecimal getZone_8_Distance__m () {
					return this.Zone_8_Distance__m;
				}
				
			    public BigDecimal Hard_Running__m;

				public BigDecimal getHard_Running__m () {
					return this.Hard_Running__m;
				}
				
			    public BigDecimal Hard_Running_Efforts;

				public BigDecimal getHard_Running_Efforts () {
					return this.Hard_Running_Efforts;
				}
				
			    public BigDecimal Work_Rate__m_min;

				public BigDecimal getWork_Rate__m_min () {
					return this.Work_Rate__m_min;
				}
				
			    public BigDecimal Top_Speed__m_s;

				public BigDecimal getTop_Speed__m_s () {
					return this.Top_Speed__m_s;
				}
				
			    public BigDecimal Intensity;

				public BigDecimal getIntensity () {
					return this.Intensity;
				}
				
			    public BigDecimal Impact_Light;

				public BigDecimal getImpact_Light () {
					return this.Impact_Light;
				}
				
			    public BigDecimal Impact_Medium;

				public BigDecimal getImpact_Medium () {
					return this.Impact_Medium;
				}
				
			    public BigDecimal Impact_Heavy;

				public BigDecimal getImpact_Heavy () {
					return this.Impact_Heavy;
				}
				
			    public BigDecimal Load_2D;

				public BigDecimal getLoad_2D () {
					return this.Load_2D;
				}
				
			    public BigDecimal Load_3D;

				public BigDecimal getLoad_3D () {
					return this.Load_3D;
				}
				
			    public BigDecimal HR_Mean__bpm;

				public BigDecimal getHR_Mean__bpm () {
					return this.HR_Mean__bpm;
				}
				
			    public BigDecimal HR_Max__bpm;

				public BigDecimal getHR_Max__bpm () {
					return this.HR_Max__bpm;
				}
				
			    public BigDecimal HR_Grey_Zone;

				public BigDecimal getHR_Grey_Zone () {
					return this.HR_Grey_Zone;
				}
				
			    public BigDecimal HR_Blue_Zone;

				public BigDecimal getHR_Blue_Zone () {
					return this.HR_Blue_Zone;
				}
				
			    public BigDecimal HR_Green_Zone;

				public BigDecimal getHR_Green_Zone () {
					return this.HR_Green_Zone;
				}
				
			    public BigDecimal HR_Yellow_Zone;

				public BigDecimal getHR_Yellow_Zone () {
					return this.HR_Yellow_Zone;
				}
				
			    public BigDecimal HR_Red_Zone;

				public BigDecimal getHR_Red_Zone () {
					return this.HR_Red_Zone;
				}
				
			    public BigDecimal HR_Efficiency__m_beat;

				public BigDecimal getHR_Efficiency__m_beat () {
					return this.HR_Efficiency__m_beat;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MIDDLEWARE_loader_radford.length) {
				if(length < 1024 && commonByteArray_MIDDLEWARE_loader_radford.length == 0) {
   					commonByteArray_MIDDLEWARE_loader_radford = new byte[1024];
				} else {
   					commonByteArray_MIDDLEWARE_loader_radford = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MIDDLEWARE_loader_radford, 0, length);
			strReturn = new String(commonByteArray_MIDDLEWARE_loader_radford, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MIDDLEWARE_loader_radford.length) {
				if(length < 1024 && commonByteArray_MIDDLEWARE_loader_radford.length == 0) {
   					commonByteArray_MIDDLEWARE_loader_radford = new byte[1024];
				} else {
   					commonByteArray_MIDDLEWARE_loader_radford = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MIDDLEWARE_loader_radford, 0, length);
			strReturn = new String(commonByteArray_MIDDLEWARE_loader_radford, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MIDDLEWARE_loader_radford) {

        	try {

        		int length = 0;
		
					this.Event_Date = readString(dis);
					
					this.Event_Description = readString(dis);
					
					this.Player_Name = readString(dis);
					
					this.Event_Type = readString(dis);
					
					this.Event_Location = readString(dis);
					
					this.Event_Result = readString(dis);
					
					this.Event_Tags = readString(dis);
					
					this.Segment_Name = readString(dis);
					
						this.Performance_Duration__min = (BigDecimal) dis.readObject();
					
						this.Total_Distance__m = (BigDecimal) dis.readObject();
					
						this.Walk_Distance__m = (BigDecimal) dis.readObject();
					
						this.Jog_Distance__m = (BigDecimal) dis.readObject();
					
						this.Run_Distance__m = (BigDecimal) dis.readObject();
					
						this.Sprint_Distance__m = (BigDecimal) dis.readObject();
					
						this.Sprint_Efforts = (BigDecimal) dis.readObject();
					
						this.Zone_1_Distance__m = (BigDecimal) dis.readObject();
					
						this.Zone_2_Distance__m = (BigDecimal) dis.readObject();
					
						this.Zone_3_Distance__m = (BigDecimal) dis.readObject();
					
						this.Zone_4_Distance__m = (BigDecimal) dis.readObject();
					
						this.Zone_5_Distance__m = (BigDecimal) dis.readObject();
					
						this.Zone_6_Distance__m = (BigDecimal) dis.readObject();
					
						this.Zone_7_Distance__m = (BigDecimal) dis.readObject();
					
						this.Zone_8_Distance__m = (BigDecimal) dis.readObject();
					
						this.Hard_Running__m = (BigDecimal) dis.readObject();
					
						this.Hard_Running_Efforts = (BigDecimal) dis.readObject();
					
						this.Work_Rate__m_min = (BigDecimal) dis.readObject();
					
						this.Top_Speed__m_s = (BigDecimal) dis.readObject();
					
						this.Intensity = (BigDecimal) dis.readObject();
					
						this.Impact_Light = (BigDecimal) dis.readObject();
					
						this.Impact_Medium = (BigDecimal) dis.readObject();
					
						this.Impact_Heavy = (BigDecimal) dis.readObject();
					
						this.Load_2D = (BigDecimal) dis.readObject();
					
						this.Load_3D = (BigDecimal) dis.readObject();
					
						this.HR_Mean__bpm = (BigDecimal) dis.readObject();
					
						this.HR_Max__bpm = (BigDecimal) dis.readObject();
					
						this.HR_Grey_Zone = (BigDecimal) dis.readObject();
					
						this.HR_Blue_Zone = (BigDecimal) dis.readObject();
					
						this.HR_Green_Zone = (BigDecimal) dis.readObject();
					
						this.HR_Yellow_Zone = (BigDecimal) dis.readObject();
					
						this.HR_Red_Zone = (BigDecimal) dis.readObject();
					
						this.HR_Efficiency__m_beat = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MIDDLEWARE_loader_radford) {

        	try {

        		int length = 0;
		
					this.Event_Date = readString(dis);
					
					this.Event_Description = readString(dis);
					
					this.Player_Name = readString(dis);
					
					this.Event_Type = readString(dis);
					
					this.Event_Location = readString(dis);
					
					this.Event_Result = readString(dis);
					
					this.Event_Tags = readString(dis);
					
					this.Segment_Name = readString(dis);
					
						this.Performance_Duration__min = (BigDecimal) dis.readObject();
					
						this.Total_Distance__m = (BigDecimal) dis.readObject();
					
						this.Walk_Distance__m = (BigDecimal) dis.readObject();
					
						this.Jog_Distance__m = (BigDecimal) dis.readObject();
					
						this.Run_Distance__m = (BigDecimal) dis.readObject();
					
						this.Sprint_Distance__m = (BigDecimal) dis.readObject();
					
						this.Sprint_Efforts = (BigDecimal) dis.readObject();
					
						this.Zone_1_Distance__m = (BigDecimal) dis.readObject();
					
						this.Zone_2_Distance__m = (BigDecimal) dis.readObject();
					
						this.Zone_3_Distance__m = (BigDecimal) dis.readObject();
					
						this.Zone_4_Distance__m = (BigDecimal) dis.readObject();
					
						this.Zone_5_Distance__m = (BigDecimal) dis.readObject();
					
						this.Zone_6_Distance__m = (BigDecimal) dis.readObject();
					
						this.Zone_7_Distance__m = (BigDecimal) dis.readObject();
					
						this.Zone_8_Distance__m = (BigDecimal) dis.readObject();
					
						this.Hard_Running__m = (BigDecimal) dis.readObject();
					
						this.Hard_Running_Efforts = (BigDecimal) dis.readObject();
					
						this.Work_Rate__m_min = (BigDecimal) dis.readObject();
					
						this.Top_Speed__m_s = (BigDecimal) dis.readObject();
					
						this.Intensity = (BigDecimal) dis.readObject();
					
						this.Impact_Light = (BigDecimal) dis.readObject();
					
						this.Impact_Medium = (BigDecimal) dis.readObject();
					
						this.Impact_Heavy = (BigDecimal) dis.readObject();
					
						this.Load_2D = (BigDecimal) dis.readObject();
					
						this.Load_3D = (BigDecimal) dis.readObject();
					
						this.HR_Mean__bpm = (BigDecimal) dis.readObject();
					
						this.HR_Max__bpm = (BigDecimal) dis.readObject();
					
						this.HR_Grey_Zone = (BigDecimal) dis.readObject();
					
						this.HR_Blue_Zone = (BigDecimal) dis.readObject();
					
						this.HR_Green_Zone = (BigDecimal) dis.readObject();
					
						this.HR_Yellow_Zone = (BigDecimal) dis.readObject();
					
						this.HR_Red_Zone = (BigDecimal) dis.readObject();
					
						this.HR_Efficiency__m_beat = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Event_Date,dos);
					
					// String
				
						writeString(this.Event_Description,dos);
					
					// String
				
						writeString(this.Player_Name,dos);
					
					// String
				
						writeString(this.Event_Type,dos);
					
					// String
				
						writeString(this.Event_Location,dos);
					
					// String
				
						writeString(this.Event_Result,dos);
					
					// String
				
						writeString(this.Event_Tags,dos);
					
					// String
				
						writeString(this.Segment_Name,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Performance_Duration__min);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Total_Distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Walk_Distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Jog_Distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Run_Distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Sprint_Distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Sprint_Efforts);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Zone_1_Distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Zone_2_Distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Zone_3_Distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Zone_4_Distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Zone_5_Distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Zone_6_Distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Zone_7_Distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Zone_8_Distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Hard_Running__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Hard_Running_Efforts);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Work_Rate__m_min);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Top_Speed__m_s);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Intensity);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Impact_Light);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Impact_Medium);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Impact_Heavy);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Load_2D);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Load_3D);
					
					// BigDecimal
				
       			    	dos.writeObject(this.HR_Mean__bpm);
					
					// BigDecimal
				
       			    	dos.writeObject(this.HR_Max__bpm);
					
					// BigDecimal
				
       			    	dos.writeObject(this.HR_Grey_Zone);
					
					// BigDecimal
				
       			    	dos.writeObject(this.HR_Blue_Zone);
					
					// BigDecimal
				
       			    	dos.writeObject(this.HR_Green_Zone);
					
					// BigDecimal
				
       			    	dos.writeObject(this.HR_Yellow_Zone);
					
					// BigDecimal
				
       			    	dos.writeObject(this.HR_Red_Zone);
					
					// BigDecimal
				
       			    	dos.writeObject(this.HR_Efficiency__m_beat);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Event_Date,dos);
					
					// String
				
						writeString(this.Event_Description,dos);
					
					// String
				
						writeString(this.Player_Name,dos);
					
					// String
				
						writeString(this.Event_Type,dos);
					
					// String
				
						writeString(this.Event_Location,dos);
					
					// String
				
						writeString(this.Event_Result,dos);
					
					// String
				
						writeString(this.Event_Tags,dos);
					
					// String
				
						writeString(this.Segment_Name,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Performance_Duration__min);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Total_Distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Walk_Distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Jog_Distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Run_Distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Sprint_Distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Sprint_Efforts);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Zone_1_Distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Zone_2_Distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Zone_3_Distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Zone_4_Distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Zone_5_Distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Zone_6_Distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Zone_7_Distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Zone_8_Distance__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Hard_Running__m);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Hard_Running_Efforts);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Work_Rate__m_min);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Top_Speed__m_s);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Intensity);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Impact_Light);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Impact_Medium);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Impact_Heavy);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Load_2D);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Load_3D);
					
					// BigDecimal
				
       			    	dos.writeObject(this.HR_Mean__bpm);
					
					// BigDecimal
				
       			    	dos.writeObject(this.HR_Max__bpm);
					
					// BigDecimal
				
       			    	dos.writeObject(this.HR_Grey_Zone);
					
					// BigDecimal
				
       			    	dos.writeObject(this.HR_Blue_Zone);
					
					// BigDecimal
				
       			    	dos.writeObject(this.HR_Green_Zone);
					
					// BigDecimal
				
       			    	dos.writeObject(this.HR_Yellow_Zone);
					
					// BigDecimal
				
       			    	dos.writeObject(this.HR_Red_Zone);
					
					// BigDecimal
				
       			    	dos.writeObject(this.HR_Efficiency__m_beat);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Event_Date="+Event_Date);
		sb.append(",Event_Description="+Event_Description);
		sb.append(",Player_Name="+Player_Name);
		sb.append(",Event_Type="+Event_Type);
		sb.append(",Event_Location="+Event_Location);
		sb.append(",Event_Result="+Event_Result);
		sb.append(",Event_Tags="+Event_Tags);
		sb.append(",Segment_Name="+Segment_Name);
		sb.append(",Performance_Duration__min="+String.valueOf(Performance_Duration__min));
		sb.append(",Total_Distance__m="+String.valueOf(Total_Distance__m));
		sb.append(",Walk_Distance__m="+String.valueOf(Walk_Distance__m));
		sb.append(",Jog_Distance__m="+String.valueOf(Jog_Distance__m));
		sb.append(",Run_Distance__m="+String.valueOf(Run_Distance__m));
		sb.append(",Sprint_Distance__m="+String.valueOf(Sprint_Distance__m));
		sb.append(",Sprint_Efforts="+String.valueOf(Sprint_Efforts));
		sb.append(",Zone_1_Distance__m="+String.valueOf(Zone_1_Distance__m));
		sb.append(",Zone_2_Distance__m="+String.valueOf(Zone_2_Distance__m));
		sb.append(",Zone_3_Distance__m="+String.valueOf(Zone_3_Distance__m));
		sb.append(",Zone_4_Distance__m="+String.valueOf(Zone_4_Distance__m));
		sb.append(",Zone_5_Distance__m="+String.valueOf(Zone_5_Distance__m));
		sb.append(",Zone_6_Distance__m="+String.valueOf(Zone_6_Distance__m));
		sb.append(",Zone_7_Distance__m="+String.valueOf(Zone_7_Distance__m));
		sb.append(",Zone_8_Distance__m="+String.valueOf(Zone_8_Distance__m));
		sb.append(",Hard_Running__m="+String.valueOf(Hard_Running__m));
		sb.append(",Hard_Running_Efforts="+String.valueOf(Hard_Running_Efforts));
		sb.append(",Work_Rate__m_min="+String.valueOf(Work_Rate__m_min));
		sb.append(",Top_Speed__m_s="+String.valueOf(Top_Speed__m_s));
		sb.append(",Intensity="+String.valueOf(Intensity));
		sb.append(",Impact_Light="+String.valueOf(Impact_Light));
		sb.append(",Impact_Medium="+String.valueOf(Impact_Medium));
		sb.append(",Impact_Heavy="+String.valueOf(Impact_Heavy));
		sb.append(",Load_2D="+String.valueOf(Load_2D));
		sb.append(",Load_3D="+String.valueOf(Load_3D));
		sb.append(",HR_Mean__bpm="+String.valueOf(HR_Mean__bpm));
		sb.append(",HR_Max__bpm="+String.valueOf(HR_Max__bpm));
		sb.append(",HR_Grey_Zone="+String.valueOf(HR_Grey_Zone));
		sb.append(",HR_Blue_Zone="+String.valueOf(HR_Blue_Zone));
		sb.append(",HR_Green_Zone="+String.valueOf(HR_Green_Zone));
		sb.append(",HR_Yellow_Zone="+String.valueOf(HR_Yellow_Zone));
		sb.append(",HR_Red_Zone="+String.valueOf(HR_Red_Zone));
		sb.append(",HR_Efficiency__m_beat="+String.valueOf(HR_Efficiency__m_beat));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileList_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
map_outStruct map_out = new map_outStruct();



	
	/**
	 * [tFileList_1 begin ] start
	 */

				
			int NB_ITERATE_tFileInputDelimited_1 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_1", false);
		start_Hash.put("tFileList_1", System.currentTimeMillis());
		
	
	currentComponent="tFileList_1";

	
		int tos_count_tFileList_1 = 0;
		
	
 
     
    
  String directory_tFileList_1 = context.filelist_src;
  final java.util.List<String> maskList_tFileList_1 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_1 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_1.add("*.csv");  
  for (final String filemask_tFileList_1 : maskList_tFileList_1) {
	String filemask_compile_tFileList_1 = filemask_tFileList_1;
	
		filemask_compile_tFileList_1 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_1.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_1 = java.util.regex.Pattern.compile(filemask_compile_tFileList_1);
	patternList_tFileList_1.add(fileNamePattern_tFileList_1);
  }
  int NB_FILEtFileList_1 = 0;

  final boolean case_sensitive_tFileList_1 = true;
	
	
	
    final java.util.List<java.io.File> list_tFileList_1 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_1 = new java.util.HashSet<String>();
	java.io.File file_tFileList_1 = new java.io.File(directory_tFileList_1);
     
		file_tFileList_1.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
                if (!file.isDirectory()) {
                	
    	String fileName_tFileList_1 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_1 : patternList_tFileList_1) {
          	if (fileNamePattern_tFileList_1.matcher(fileName_tFileList_1).matches()){
					if(!filePath_tFileList_1.contains(file.getAbsolutePath())) {
			          list_tFileList_1.add(file);
			          filePath_tFileList_1.add(file.getAbsolutePath());
			        }
			}
		}
                }
              return true;
            }
          }
      ); 
      java.util.Collections.sort(list_tFileList_1);
    
    for (int i_tFileList_1 = 0; i_tFileList_1 < list_tFileList_1.size(); i_tFileList_1++){
      java.io.File files_tFileList_1 = list_tFileList_1.get(i_tFileList_1);
      String fileName_tFileList_1 = files_tFileList_1.getName();
      
      String currentFileName_tFileList_1 = files_tFileList_1.getName(); 
      String currentFilePath_tFileList_1 = files_tFileList_1.getAbsolutePath();
      String currentFileDirectory_tFileList_1 = files_tFileList_1.getParent();
      String currentFileExtension_tFileList_1 = null;
      
      if (files_tFileList_1.getName().contains(".") && files_tFileList_1.isFile()){
        currentFileExtension_tFileList_1 = files_tFileList_1.getName().substring(files_tFileList_1.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_1 = "";
      }
      
      NB_FILEtFileList_1 ++;
      globalMap.put("tFileList_1_CURRENT_FILE", currentFileName_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEPATH", currentFilePath_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_1);
      globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);
      
 



/**
 * [tFileList_1 begin ] stop
 */
	
	/**
	 * [tFileList_1 main ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 


	tos_count_tFileList_1++;

/**
 * [tFileList_1 main ] stop
 */
	
	/**
	 * [tFileList_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 



/**
 * [tFileList_1 process_data_begin ] stop
 */
	NB_ITERATE_tFileInputDelimited_1++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("map_out", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row1", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tFileInputDelimited_1);
					//Thread.sleep(1000);
				}				
			



	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"map_out");
					}
				
		int tos_count_tDBOutput_2 = 0;
		





String dbschema_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = context.database_schema;
	

String tableName_tDBOutput_2 = null;
if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
	tableName_tDBOutput_2 = (context.table);
} else {
	tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + (context.table);
}


int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rowsToCommitCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

boolean whetherReject_tDBOutput_2 = false;

java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_2 = "jdbc:postgresql://"+context.server+":"+context.server_port+"/"+context.database;
    dbUser_tDBOutput_2 = context.userid;

	final String decryptedPassword_tDBOutput_2 = context.password; 

    String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;

    conn_tDBOutput_2 = java.sql.DriverManager.getConnection(url_tDBOutput_2,dbUser_tDBOutput_2,dbPwd_tDBOutput_2);
	
	resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
        conn_tDBOutput_2.setAutoCommit(false);
        int commitEvery_tDBOutput_2 = 10000;
        int commitCounter_tDBOutput_2 = 0;


   int batchSize_tDBOutput_2 = 10000;
   int batchSizeCounter_tDBOutput_2=0;

int count_tDBOutput_2=0;
	    String insert_tDBOutput_2 = "INSERT INTO \"" + tableName_tDBOutput_2 + "\" (\"upload_id\",\"event_date\",\"event_description\",\"player_name\",\"event_type\",\"event_location\",\"event_result\",\"event_tags\",\"segment_name\",\"performance_duration__min\",\"total_distance__m\",\"walk_distance__m\",\"jog_distance__m\",\"run_distance__m\",\"sprint_distance__m\",\"sprint_efforts\",\"zone_1_distance__m\",\"zone_2_distance__m\",\"zone_3_distance__m\",\"zone_4_distance__m\",\"zone_5_distance__m\",\"zone_6_distance__m\",\"zone_7_distance__m\",\"zone_8_distance__m\",\"hard_running__m\",\"hard_running_efforts\",\"work_rate__m_min\",\"top_speed__m_s\",\"intensity\",\"impact_light\",\"impact_medium\",\"impact_heavy\",\"load_2d\",\"load_3d\",\"hr_mean__bpm\",\"hr_max__bpm\",\"hr_grey_zone\",\"hr_blue_zone\",\"hr_green_zone\",\"hr_yellow_zone\",\"hr_red_zone\",\"hr_efficiency__m_beat\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
	int Upload_Id;
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
map_outStruct map_out_tmp = new map_outStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try{
					
						Object filename_tFileInputDelimited_1 = ((String)globalMap.get("tFileList_1_CURRENT_FILEPATH"));
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(((String)globalMap.get("tFileList_1_CURRENT_FILEPATH")), "ISO-8859-15",",","\n",true,1,0,
									limit_tFileInputDelimited_1
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						row1 = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									row1 = new row1Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
							row1.Event_Date = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
							row1.Event_Description = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 2;
					
							row1.Player_Name = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 3;
					
							row1.Event_Type = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 4;
					
							row1.Event_Location = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 5;
					
							row1.Event_Result = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 6;
					
							row1.Event_Tags = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 7;
					
							row1.Segment_Name = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 8;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						if(temp.length() > 0) {
							
								try {
								
    								row1.Performance_Duration__min = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Performance_Duration__min", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.Performance_Duration__min = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 9;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						if(temp.length() > 0) {
							
								try {
								
    								row1.Total_Distance__m = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Total_Distance__m", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.Total_Distance__m = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 10;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						if(temp.length() > 0) {
							
								try {
								
    								row1.Walk_Distance__m = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Walk_Distance__m", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.Walk_Distance__m = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 11;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						if(temp.length() > 0) {
							
								try {
								
    								row1.Jog_Distance__m = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Jog_Distance__m", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.Jog_Distance__m = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 12;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						if(temp.length() > 0) {
							
								try {
								
    								row1.Run_Distance__m = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Run_Distance__m", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.Run_Distance__m = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 13;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						if(temp.length() > 0) {
							
								try {
								
    								row1.Sprint_Distance__m = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Sprint_Distance__m", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.Sprint_Distance__m = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 14;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						if(temp.length() > 0) {
							
								try {
								
    								row1.Sprint_Efforts = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Sprint_Efforts", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.Sprint_Efforts = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 15;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						if(temp.length() > 0) {
							
								try {
								
    								row1.Zone_1_Distance__m = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Zone_1_Distance__m", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.Zone_1_Distance__m = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 16;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						if(temp.length() > 0) {
							
								try {
								
    								row1.Zone_2_Distance__m = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Zone_2_Distance__m", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.Zone_2_Distance__m = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 17;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						if(temp.length() > 0) {
							
								try {
								
    								row1.Zone_3_Distance__m = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Zone_3_Distance__m", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.Zone_3_Distance__m = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 18;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						if(temp.length() > 0) {
							
								try {
								
    								row1.Zone_4_Distance__m = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Zone_4_Distance__m", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.Zone_4_Distance__m = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 19;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						if(temp.length() > 0) {
							
								try {
								
    								row1.Zone_5_Distance__m = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Zone_5_Distance__m", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.Zone_5_Distance__m = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 20;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						if(temp.length() > 0) {
							
								try {
								
    								row1.Zone_6_Distance__m = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Zone_6_Distance__m", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.Zone_6_Distance__m = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 21;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						if(temp.length() > 0) {
							
								try {
								
    								row1.Zone_7_Distance__m = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Zone_7_Distance__m", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.Zone_7_Distance__m = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 22;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						if(temp.length() > 0) {
							
								try {
								
    								row1.Zone_8_Distance__m = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Zone_8_Distance__m", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.Zone_8_Distance__m = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 23;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						if(temp.length() > 0) {
							
								try {
								
    								row1.Hard_Running__m = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Hard_Running__m", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.Hard_Running__m = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 24;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						if(temp.length() > 0) {
							
								try {
								
    								row1.Hard_Running_Efforts = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Hard_Running_Efforts", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.Hard_Running_Efforts = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 25;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						if(temp.length() > 0) {
							
								try {
								
    								row1.Work_Rate__m_min = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Work_Rate__m_min", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.Work_Rate__m_min = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 26;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						if(temp.length() > 0) {
							
								try {
								
    								row1.Top_Speed__m_s = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Top_Speed__m_s", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.Top_Speed__m_s = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 27;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						if(temp.length() > 0) {
							
								try {
								
    								row1.Intensity = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Intensity", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.Intensity = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 28;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						if(temp.length() > 0) {
							
								try {
								
    								row1.Impact_Light = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Impact_Light", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.Impact_Light = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 29;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						if(temp.length() > 0) {
							
								try {
								
    								row1.Impact_Medium = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Impact_Medium", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.Impact_Medium = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 30;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						if(temp.length() > 0) {
							
								try {
								
    								row1.Impact_Heavy = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Impact_Heavy", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.Impact_Heavy = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 31;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						if(temp.length() > 0) {
							
								try {
								
    								row1.Load_2D = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Load_2D", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.Load_2D = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 32;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						if(temp.length() > 0) {
							
								try {
								
    								row1.Load_3D = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Load_3D", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.Load_3D = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 33;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						if(temp.length() > 0) {
							
								try {
								
    								row1.HR_Mean__bpm = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"HR_Mean__bpm", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.HR_Mean__bpm = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 34;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						if(temp.length() > 0) {
							
								try {
								
    								row1.HR_Max__bpm = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"HR_Max__bpm", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.HR_Max__bpm = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 35;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						if(temp.length() > 0) {
							
								try {
								
    								row1.HR_Grey_Zone = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"HR_Grey_Zone", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.HR_Grey_Zone = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 36;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						if(temp.length() > 0) {
							
								try {
								
    								row1.HR_Blue_Zone = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"HR_Blue_Zone", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.HR_Blue_Zone = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 37;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						if(temp.length() > 0) {
							
								try {
								
    								row1.HR_Green_Zone = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"HR_Green_Zone", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.HR_Green_Zone = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 38;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						if(temp.length() > 0) {
							
								try {
								
    								row1.HR_Yellow_Zone = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"HR_Yellow_Zone", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.HR_Yellow_Zone = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 39;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						if(temp.length() > 0) {
							
								try {
								
    								row1.HR_Red_Zone = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"HR_Red_Zone", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.HR_Red_Zone = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 40;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						if(temp.length() > 0) {
							
								try {
								
    								row1.HR_Efficiency__m_beat = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"HR_Efficiency__m_beat", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.HR_Efficiency__m_beat = null;
								
							
						}
					
				
				
				 	int filedsum = fid_tFileInputDelimited_1.getColumnsCountOfCurrentRow();
				 	if(filedsum < (41 )){
					 	throw new RuntimeException("Column(s) missing");
					 } else if(filedsum > (41 )) {
					 	throw new RuntimeException("Too many columns");
					 }     
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row1 = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;
Var.Upload_Id = 18 ;// ###############################
        // ###############################
        // # Output tables

map_out = null;


// # Output table : 'map_out'
map_out_tmp.upload_id = Var.Upload_Id ;
map_out_tmp.event_date = row1.Event_Date;
map_out_tmp.event_description = row1.Event_Description;
map_out_tmp.player_name = row1.Player_Name;
map_out_tmp.event_type = row1.Event_Type;
map_out_tmp.event_location = row1.Event_Location;
map_out_tmp.event_result = row1.Event_Result;
map_out_tmp.event_tags = row1.Event_Tags;
map_out_tmp.segment_name = row1.Segment_Name;
map_out_tmp.performance_duration__min = row1.Performance_Duration__min;
map_out_tmp.total_distance__m = row1.Total_Distance__m;
map_out_tmp.walk_distance__m = row1.Walk_Distance__m;
map_out_tmp.jog_distance__m = row1.Jog_Distance__m;
map_out_tmp.run_distance__m = row1.Run_Distance__m;
map_out_tmp.sprint_distance__m = row1.Sprint_Distance__m;
map_out_tmp.sprint_efforts = row1.Sprint_Efforts;
map_out_tmp.zone_1_distance__m = row1.Zone_1_Distance__m;
map_out_tmp.zone_2_distance__m = row1.Zone_2_Distance__m;
map_out_tmp.zone_3_distance__m = row1.Zone_3_Distance__m;
map_out_tmp.zone_4_distance__m = row1.Zone_4_Distance__m;
map_out_tmp.zone_5_distance__m = row1.Zone_5_Distance__m;
map_out_tmp.zone_6_distance__m = row1.Zone_6_Distance__m;
map_out_tmp.zone_7_distance__m = row1.Zone_7_Distance__m;
map_out_tmp.zone_8_distance__m = row1.Zone_8_Distance__m;
map_out_tmp.hard_running__m = row1.Hard_Running__m;
map_out_tmp.hard_running_efforts = row1.Hard_Running_Efforts;
map_out_tmp.work_rate__m_min = row1.Work_Rate__m_min;
map_out_tmp.top_speed__m_s = row1.Top_Speed__m_s;
map_out_tmp.intensity = row1.Intensity;
map_out_tmp.impact_light = row1.Impact_Light;
map_out_tmp.impact_medium = row1.Impact_Medium;
map_out_tmp.impact_heavy = row1.Impact_Heavy;
map_out_tmp.load_2d = row1.Load_2D;
map_out_tmp.load_3d = row1.Load_3D;
map_out_tmp.hr_mean__bpm = row1.HR_Mean__bpm;
map_out_tmp.hr_max__bpm = row1.HR_Max__bpm;
map_out_tmp.hr_grey_zone = row1.HR_Grey_Zone;
map_out_tmp.hr_blue_zone = row1.HR_Blue_Zone;
map_out_tmp.hr_green_zone = row1.HR_Green_Zone;
map_out_tmp.hr_yellow_zone = row1.HR_Yellow_Zone;
map_out_tmp.hr_red_zone = row1.HR_Red_Zone;
map_out_tmp.hr_efficiency__m_beat = row1.HR_Efficiency__m_beat;
map_out = map_out_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "map_out"
if(map_out != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"map_out"
						
						);
					}
					



        whetherReject_tDBOutput_2 = false;
                    pstmt_tDBOutput_2.setInt(1, map_out.upload_id);

                    if(map_out.event_date == null) {
pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(2, map_out.event_date);
}

                    if(map_out.event_description == null) {
pstmt_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(3, map_out.event_description);
}

                    if(map_out.player_name == null) {
pstmt_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(4, map_out.player_name);
}

                    if(map_out.event_type == null) {
pstmt_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(5, map_out.event_type);
}

                    if(map_out.event_location == null) {
pstmt_tDBOutput_2.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(6, map_out.event_location);
}

                    if(map_out.event_result == null) {
pstmt_tDBOutput_2.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(7, map_out.event_result);
}

                    if(map_out.event_tags == null) {
pstmt_tDBOutput_2.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(8, map_out.event_tags);
}

                    if(map_out.segment_name == null) {
pstmt_tDBOutput_2.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(9, map_out.segment_name);
}

                    pstmt_tDBOutput_2.setBigDecimal(10, map_out.performance_duration__min);

                    pstmt_tDBOutput_2.setBigDecimal(11, map_out.total_distance__m);

                    pstmt_tDBOutput_2.setBigDecimal(12, map_out.walk_distance__m);

                    pstmt_tDBOutput_2.setBigDecimal(13, map_out.jog_distance__m);

                    pstmt_tDBOutput_2.setBigDecimal(14, map_out.run_distance__m);

                    pstmt_tDBOutput_2.setBigDecimal(15, map_out.sprint_distance__m);

                    pstmt_tDBOutput_2.setBigDecimal(16, map_out.sprint_efforts);

                    pstmt_tDBOutput_2.setBigDecimal(17, map_out.zone_1_distance__m);

                    pstmt_tDBOutput_2.setBigDecimal(18, map_out.zone_2_distance__m);

                    pstmt_tDBOutput_2.setBigDecimal(19, map_out.zone_3_distance__m);

                    pstmt_tDBOutput_2.setBigDecimal(20, map_out.zone_4_distance__m);

                    pstmt_tDBOutput_2.setBigDecimal(21, map_out.zone_5_distance__m);

                    pstmt_tDBOutput_2.setBigDecimal(22, map_out.zone_6_distance__m);

                    pstmt_tDBOutput_2.setBigDecimal(23, map_out.zone_7_distance__m);

                    pstmt_tDBOutput_2.setBigDecimal(24, map_out.zone_8_distance__m);

                    pstmt_tDBOutput_2.setBigDecimal(25, map_out.hard_running__m);

                    pstmt_tDBOutput_2.setBigDecimal(26, map_out.hard_running_efforts);

                    pstmt_tDBOutput_2.setBigDecimal(27, map_out.work_rate__m_min);

                    pstmt_tDBOutput_2.setBigDecimal(28, map_out.top_speed__m_s);

                    pstmt_tDBOutput_2.setBigDecimal(29, map_out.intensity);

                    pstmt_tDBOutput_2.setBigDecimal(30, map_out.impact_light);

                    pstmt_tDBOutput_2.setBigDecimal(31, map_out.impact_medium);

                    pstmt_tDBOutput_2.setBigDecimal(32, map_out.impact_heavy);

                    pstmt_tDBOutput_2.setBigDecimal(33, map_out.load_2d);

                    pstmt_tDBOutput_2.setBigDecimal(34, map_out.load_3d);

                    pstmt_tDBOutput_2.setBigDecimal(35, map_out.hr_mean__bpm);

                    pstmt_tDBOutput_2.setBigDecimal(36, map_out.hr_max__bpm);

                    pstmt_tDBOutput_2.setBigDecimal(37, map_out.hr_grey_zone);

                    pstmt_tDBOutput_2.setBigDecimal(38, map_out.hr_blue_zone);

                    pstmt_tDBOutput_2.setBigDecimal(39, map_out.hr_green_zone);

                    pstmt_tDBOutput_2.setBigDecimal(40, map_out.hr_yellow_zone);

                    pstmt_tDBOutput_2.setBigDecimal(41, map_out.hr_red_zone);

                    pstmt_tDBOutput_2.setBigDecimal(42, map_out.hr_efficiency__m_beat);

			
    		pstmt_tDBOutput_2.addBatch();
    		nb_line_tDBOutput_2++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_2++;
    		  
    			if ((batchSize_tDBOutput_2 > 0) && (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
                try {
						int countSum_tDBOutput_2 = 0;
						    
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
				    	rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
				    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
            	    	batchSizeCounter_tDBOutput_2 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_2){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e_tDBOutput_2.getMessage());
				    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
				    	String errormessage_tDBOutput_2;
						if (ne_tDBOutput_2 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
							errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
						}else{
							errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
						}
				    	
				    	int countSum_tDBOutput_2 = 0;
						for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
						rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
						
				    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
				    	System.err.println(errormessage_tDBOutput_2);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_2++;
                if(commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
                if ((batchSize_tDBOutput_2 > 0) && (batchSizeCounter_tDBOutput_2 > 0)) {
                try {
                		int countSum_tDBOutput_2 = 0;
                		    
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
            	    	rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
            	    	
            	    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
            	    	
                batchSizeCounter_tDBOutput_2 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_2){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e_tDBOutput_2.getMessage());
			    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
			    	String errormessage_tDBOutput_2;
					if (ne_tDBOutput_2 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
						errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
					}else{
						errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
					}
			    	
			    	int countSum_tDBOutput_2 = 0;
					for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
					
			    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
			    	
			    	System.err.println(errormessage_tDBOutput_2);
			    	
				}
            }
                    if(rowsToCommitCount_tDBOutput_2 != 0){
                    	
                    }
                    conn_tDBOutput_2.commit();
                    if(rowsToCommitCount_tDBOutput_2 != 0){
                    	
                    	rowsToCommitCount_tDBOutput_2 = 0;
                    }
                    commitCounter_tDBOutput_2=0;
                }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "map_out"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	



            }
            }finally{
                if(!((Object)(((String)globalMap.get("tFileList_1_CURRENT_FILEPATH"))) instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



	    try {
				int countSum_tDBOutput_2 = 0;
				if (pstmt_tDBOutput_2 != null && batchSizeCounter_tDBOutput_2 > 0) {
						
					for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
						
				}
		    	
		    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_2){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e_tDBOutput_2.getMessage());
	    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
	    	String errormessage_tDBOutput_2;
			if (ne_tDBOutput_2 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
				errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
			}else{
				errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
			}
	    	
	    	int countSum_tDBOutput_2 = 0;
			for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
				countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
			}
			rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
			
	    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
	    	
	    	System.err.println(errormessage_tDBOutput_2);
	    	
		}
	    
        if(pstmt_tDBOutput_2 != null) {
        		
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);
			if(rowsToCommitCount_tDBOutput_2 != 0){
				
			}
			conn_tDBOutput_2.commit();
			if(rowsToCommitCount_tDBOutput_2 != 0){
				
				rowsToCommitCount_tDBOutput_2 = 0;
			}
			commitCounter_tDBOutput_2 = 0;
		
    	conn_tDBOutput_2 .close();
    	
    	resourceMap.put("finish_tDBOutput_2", true);
    	

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"map_out");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */






						if(execStat){
							runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tFileInputDelimited_1);
						}				
					




	
	/**
	 * [tFileList_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 



/**
 * [tFileList_1 process_data_end ] stop
 */
	
	/**
	 * [tFileList_1 end ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

  
    }
  globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);
  

  
 

 

ok_Hash.put("tFileList_1", true);
end_Hash.put("tFileList_1", System.currentTimeMillis());




/**
 * [tFileList_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_1 finally ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 



/**
 * [tFileList_1 finally ] stop
 */

	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_2") == null){
            java.sql.Connection ctn_tDBOutput_2 = null;
            if((ctn_tDBOutput_2 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_2")) != null){
                try {
                    ctn_tDBOutput_2.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_2) {
                    String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :" + sqlEx_tDBOutput_2.getMessage();
                    System.err.println(errorMessage_tDBOutput_2);
                }
            }
        }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final loader_radford loader_radfordClass = new loader_radford();

        int exitCode = loader_radfordClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = loader_radford.class.getClassLoader().getResourceAsStream("middleware/loader_radford_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = loader_radford.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("database", "id_String");
                        if(context.getStringValue("database") == null) {
                            context.database = null;
                        } else {
                            context.database=(String) context.getProperty("database");
                        }
                        context.setContextType("database_schema", "id_String");
                        if(context.getStringValue("database_schema") == null) {
                            context.database_schema = null;
                        } else {
                            context.database_schema=(String) context.getProperty("database_schema");
                        }
                        context.setContextType("filelist_src", "id_String");
                        if(context.getStringValue("filelist_src") == null) {
                            context.filelist_src = null;
                        } else {
                            context.filelist_src=(String) context.getProperty("filelist_src");
                        }
                        context.setContextType("password", "id_String");
                        if(context.getStringValue("password") == null) {
                            context.password = null;
                        } else {
                            context.password=(String) context.getProperty("password");
                        }
                        context.setContextType("server", "id_String");
                        if(context.getStringValue("server") == null) {
                            context.server = null;
                        } else {
                            context.server=(String) context.getProperty("server");
                        }
                        context.setContextType("server_port", "id_String");
                        if(context.getStringValue("server_port") == null) {
                            context.server_port = null;
                        } else {
                            context.server_port=(String) context.getProperty("server_port");
                        }
                        context.setContextType("table", "id_String");
                        if(context.getStringValue("table") == null) {
                            context.table = null;
                        } else {
                            context.table=(String) context.getProperty("table");
                        }
                        context.setContextType("userid", "id_String");
                        if(context.getStringValue("userid") == null) {
                            context.userid = null;
                        } else {
                            context.userid=(String) context.getProperty("userid");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("database")) {
                context.database = (String) parentContextMap.get("database");
            }if (parentContextMap.containsKey("database_schema")) {
                context.database_schema = (String) parentContextMap.get("database_schema");
            }if (parentContextMap.containsKey("filelist_src")) {
                context.filelist_src = (String) parentContextMap.get("filelist_src");
            }if (parentContextMap.containsKey("password")) {
                context.password = (String) parentContextMap.get("password");
            }if (parentContextMap.containsKey("server")) {
                context.server = (String) parentContextMap.get("server");
            }if (parentContextMap.containsKey("server_port")) {
                context.server_port = (String) parentContextMap.get("server_port");
            }if (parentContextMap.containsKey("table")) {
                context.table = (String) parentContextMap.get("table");
            }if (parentContextMap.containsKey("userid")) {
                context.userid = (String) parentContextMap.get("userid");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob





this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileList_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileList_1) {
globalMap.put("tFileList_1_SUBPROCESS_STATE", -1);

e_tFileList_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : loader_radford");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     144356 characters generated by Talend Open Studio for Data Integration 
 *     on the March 9, 2023 at 2:02:39 PM EST
 ************************************************************************************************/